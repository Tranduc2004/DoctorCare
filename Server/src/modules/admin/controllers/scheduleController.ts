import { Request, Response } from "express";
import DoctorSchedule from "../../doctor/models/DoctorSchedule";
import Doctor from "../../doctor/models/Doctor";
import mongoose from "mongoose";

function toMinutes(t?: string): number {
  if (!t) return 0;
  const [h, m] = t
    .slice(0, 5)
    .split(":")
    .map((x) => parseInt(x, 10));
  return h * 60 + m;
}
function toTime(mins: number): string {
  const h = Math.floor(mins / 60)
    .toString()
    .padStart(2, "0");
  const m = (mins % 60).toString().padStart(2, "0");
  return `${h}:${m}`;
}

// Admin: T·∫°o 1 ca l√†m vi·ªác cho b√°c sƒ©
export const adminCreateDoctorShift = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { doctorId, date, startTime, endTime } = req.body as {
      doctorId?: string;
      date?: string;
      startTime?: string;
      endTime?: string;
    };

    if (!doctorId || !date || !startTime || !endTime) {
      res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
      return;
    }

    const doctor = await Doctor.findById(doctorId).lean();
    if (!doctor) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
      return;
    }

    // Normalize inputs
    const normalizedDate = (date as string).includes("T")
      ? (date as string).split("T")[0]
      : (date as string);
    const normalizeTime = (t?: string) => (t ? t.slice(0, 5) : t);

    const normStart = normalizeTime(startTime) as string;
    const normEnd = normalizeTime(endTime) as string;

    // Specialty guard: specialties must differ within identical window
    const existingSameWindow = await DoctorSchedule.find({
      date: normalizedDate,
      startTime: normStart,
      endTime: normEnd,
    })
      .populate({ path: "doctorId", select: "specialty" })
      .lean();

    const newDoctor = await Doctor.findById(doctorId)
      .select("specialty")
      .lean();
    const newSpec =
      (newDoctor as any)?.specialty?.toString?.() ??
      (newDoctor as any)?.specialty;
    const hasDuplicateSpecialty = existingSameWindow.some((s: any) => {
      const spec = (s.doctorId as any)?.specialty;
      const specId = spec?.toString?.() ?? spec;
      return specId && newSpec && specId === newSpec;
    });
    if (hasDuplicateSpecialty) {
      res
        .status(400)
        .json({ message: "ƒê√£ c√≥ b√°c sƒ© c√πng chuy√™n khoa trong khung gi·ªù n√†y" });
      return;
    }

    // Split long shift into 60-minute slots
    const startM = toMinutes(normStart);
    const endM = toMinutes(normEnd);
    const SLOTP = 60;
    const created: any[] = [];
    for (let s = startM; s < endM; s += SLOTP) {
      const e = Math.min(s + SLOTP, endM);
      if (e - s <= 0) continue;
      const st = toTime(s);
      const et = toTime(e);
      const exists = await DoctorSchedule.findOne({
        doctorId,
        date: normalizedDate,
        startTime: st,
        endTime: et,
      }).lean();
      if (exists) continue;
      const item = await DoctorSchedule.create({
        doctorId,
        date: normalizedDate,
        startTime: st,
        endTime: et,
      });
      created.push(item);
    }

    res
      .status(201)
      .json(created.length ? created : { message: "No new slots" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói t·∫°o ca l√†m vi·ªác", error });
  }
};

// Admin: T·∫°o nhi·ªÅu ca theo m·∫£ng
export const adminBulkCreateDoctorShifts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { doctorId, slots } = req.body as {
      doctorId?: string;
      slots?: Array<{ date: string; startTime: string; endTime: string }>;
    };

    if (!doctorId || !Array.isArray(slots) || slots.length === 0) {
      res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o" });
      return;
    }

    const doctor = await Doctor.findById(doctorId).lean();
    if (!doctor) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
      return;
    }

    const newDoctor = await Doctor.findById(doctorId)
      .select("specialty")
      .lean();
    if (!newDoctor) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
      return;
    }
    const newSpec =
      (newDoctor as any)?.specialty?.toString?.() ??
      (newDoctor as any)?.specialty;

    const prepared: Array<{
      doctorId: string;
      date: string;
      startTime: string;
      endTime: string;
    }> = [];
    for (const s of slots) {
      const date = (s.date || "").includes("T")
        ? s.date.split("T")[0]
        : s.date || "";
      const startTime = (s.startTime || "").slice(0, 5);
      const endTime = (s.endTime || "").slice(0, 5);

      const existingSameWindow = await DoctorSchedule.find({
        date,
        startTime,
        endTime,
      })
        .populate({ path: "doctorId", select: "specialty" })
        .lean();

      const hasDuplicateSpecialty = existingSameWindow.some((it: any) => {
        const spec = (it.doctorId as any)?.specialty;
        const specId = spec?.toString?.() ?? spec;
        return specId && newSpec && specId === newSpec;
      });
      if (hasDuplicateSpecialty) {
        res.status(400).json({
          message: `Khung gi·ªù ${date} ${startTime}-${endTime} ƒë√£ c√≥ b√°c sƒ© c√πng chuy√™n khoa`,
        });
        return;
      }

      prepared.push({ doctorId, date, startTime, endTime });
    }

    const created = await DoctorSchedule.insertMany(prepared);
    res.status(201).json(created);
  } catch (error) {
    res.status(500).json({ message: "L·ªói t·∫°o nhi·ªÅu ca l√†m vi·ªác", error });
  }
};

// Admin: L·∫•y l·ªãch theo b√°c sƒ© + kho·∫£ng th·ªùi gian
export const adminGetDoctorShifts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { doctorId } = req.params as { doctorId: string };
    const { from, to } = req.query as { from?: string; to?: string };

    const q: any = { doctorId };
    if (from || to) {
      q.date = {} as any;
      if (from) (q.date as any).$gte = from;
      if (to) (q.date as any).$lte = to;
    }

    const items = await DoctorSchedule.find(q).sort({ date: 1, startTime: 1 });
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y ca l√†m vi·ªác", error });
  }
};

// Admin: L·∫•y t·∫•t c·∫£ ca l√†m vi·ªác c·ªßa m·ªçi b√°c sƒ© (t√πy ch·ªçn theo kho·∫£ng th·ªùi gian)
export const adminGetAllShifts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { from, to } = req.query as { from?: string; to?: string };
    const q: any = {};
    if (from || to) {
      q.date = {} as any;
      if (from) (q.date as any).$gte = from;
      if (to) (q.date as any).$lte = to;
    }

    const items = await DoctorSchedule.find(q)
      .populate({ path: "doctorId", select: "name email specialty" })
      .sort({ date: 1, startTime: 1 });
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y t·∫•t c·∫£ ca l√†m vi·ªác", error });
  }
};

// Admin: L·∫•y c√°c ca c·∫ßn x·ª≠ l√Ω (pending, rejected, busy)
export const adminGetPendingShifts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const items = await DoctorSchedule.find({
      status: { $in: ["pending", "rejected", "busy"] },
    })
      .populate({ path: "doctorId", select: "name email specialty" })
      .sort({ date: 1, startTime: 1 });

    res.json(items);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y ca c·∫ßn x·ª≠ l√Ω", error });
  }
};

// Admin: Thay th·∫ø b√°c sƒ© cho ca l√†m vi·ªác
export const adminReplaceDoctor = async (
  req: Request,
  res: Response
): Promise<void> => {
  console.log("üöÄ adminReplaceDoctor function called!");
  try {
    console.log("=== adminReplaceDoctor Debug ===");
    console.log("Request params:", req.params);
    console.log("Request body:", req.body);
    console.log("Request method:", req.method);
    console.log("Request URL:", req.url);

    const { id } = req.params as { id: string };
    const { newDoctorId, adminNote, forceReplace } = req.body as {
      newDoctorId: string;
      adminNote?: string;
      forceReplace?: boolean;
    };

    console.log("Extracted id:", id);
    console.log("Extracted newDoctorId:", newDoctorId);
    console.log("Extracted adminNote:", adminNote);
    console.log("Extracted forceReplace:", forceReplace);

    // Ki·ªÉm tra format ObjectId cho schedule ID
    console.log(
      "Validating schedule ID:",
      id,
      "Valid:",
      mongoose.Types.ObjectId.isValid(id)
    );
    if (!mongoose.Types.ObjectId.isValid(id)) {
      console.log("‚ùå Invalid schedule ID:", id);
      res.status(400).json({ message: "ID l·ªãch l√†m vi·ªác kh√¥ng h·ª£p l·ªá" });
      return;
    }

    if (!newDoctorId) {
      console.log("‚ùå Missing newDoctorId");
      res.status(400).json({ message: "Thi·∫øu ID b√°c sƒ© m·ªõi" });
      return;
    }

    // Ki·ªÉm tra format ObjectId
    console.log(
      "Validating newDoctorId:",
      newDoctorId,
      "Valid:",
      mongoose.Types.ObjectId.isValid(newDoctorId)
    );
    if (!mongoose.Types.ObjectId.isValid(newDoctorId)) {
      console.log("‚ùå Invalid newDoctorId:", newDoctorId);
      res.status(400).json({ message: "ID b√°c sƒ© m·ªõi kh√¥ng h·ª£p l·ªá" });
      return;
    }

    const existingShift = await DoctorSchedule.findById(id);
    console.log("Found existing shift:", existingShift ? "‚úÖ Yes" : "‚ùå No");
    if (!existingShift) {
      console.log("‚ùå Schedule not found with ID:", id);
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác" });
      return;
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i thay th·∫ø b·∫±ng ch√≠nh b√°c sƒ© hi·ªán t·∫°i kh√¥ng
    console.log("Current doctorId:", existingShift.doctorId.toString());
    console.log("New doctorId:", newDoctorId);
    console.log(
      "Same doctor check:",
      existingShift.doctorId.toString() === newDoctorId
    );
    if (existingShift.doctorId.toString() === newDoctorId) {
      console.log("‚ùå Cannot replace with same doctor");
      res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ thay th·∫ø b·∫±ng ch√≠nh b√°c sƒ© hi·ªán t·∫°i" });
      return;
    }

    // Ki·ªÉm tra xem l·ªãch ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch∆∞a
    console.log("Schedule isBooked:", existingShift.isBooked);
    if (existingShift.isBooked) {
      console.log("‚ùå Cannot replace doctor for booked schedule");
      res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ thay th·∫ø b√°c sƒ© cho l·ªãch ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t" });
      return;
    }

    // Ki·ªÉm tra b√°c sƒ© m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
    const newDoctor = await Doctor.findById(newDoctorId);
    console.log("Found new doctor:", newDoctor ? "‚úÖ Yes" : "‚ùå No");
    if (!newDoctor) {
      console.log("‚ùå New doctor not found with ID:", newDoctorId);
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ© m·ªõi" });
      return;
    }

    // Ki·ªÉm tra xem b√°c sƒ© m·ªõi c√≥ b·∫≠n v√†o th·ªùi gian n√†y kh√¥ng
    // Ch·ªâ ki·ªÉm tra xung ƒë·ªôt v·ªõi c√°c ca ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n (accepted)
    console.log("Checking for conflicting shifts...");
    const conflictingShift = await DoctorSchedule.findOne({
      doctorId: newDoctorId,
      date: existingShift.date,
      startTime: existingShift.startTime,
      endTime: existingShift.endTime,
      status: "accepted", // Ch·ªâ ki·ªÉm tra v·ªõi ca ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n
    });

    console.log(
      "Found conflicting shift:",
      conflictingShift ? "‚úÖ Yes" : "‚ùå No"
    );

    // N·∫øu c√≥ xung ƒë·ªôt v√† kh√¥ng force replace, th√¨ b√°o l·ªói
    if (conflictingShift && !forceReplace) {
      console.log("‚ùå New doctor has conflicting schedule");
      res.status(400).json({
        message:
          "B√°c sƒ© m·ªõi ƒë√£ c√≥ l·ªãch l√†m vi·ªác ƒë∆∞·ª£c ch·∫•p nh·∫≠n v√†o th·ªùi gian n√†y. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng forceReplace=true ƒë·ªÉ b·ªè qua ki·ªÉm tra n√†y.",
        hasConflict: true,
        conflictingShift: {
          id: conflictingShift._id,
          date: conflictingShift.date,
          startTime: conflictingShift.startTime,
          endTime: conflictingShift.endTime,
        },
      });
      return;
    }

    // N·∫øu c√≥ xung ƒë·ªôt v√† force replace, th√¨ ghi log c·∫£nh b√°o
    if (conflictingShift && forceReplace) {
      console.log("‚ö†Ô∏è Force replacing despite conflict - admin override");
    }

    // L∆∞u doctorId c≈© tr∆∞·ªõc khi thay ƒë·ªïi
    const oldDoctorId = existingShift.doctorId;

    // Ki·ªÉm tra quy t·∫Øc nhi·ªÅu b√°c sƒ©/kh√¥ng tr√πng chuy√™n khoa cho c√πng khung gi·ªù
    const sameWindow = await DoctorSchedule.find({
      date: existingShift.date,
      startTime: existingShift.startTime,
      endTime: existingShift.endTime,
      _id: { $ne: existingShift._id },
    })
      .populate({ path: "doctorId", select: "specialty" })
      .lean();

    const newDoctorSpec =
      (newDoctor as any)?.specialty?.toString?.() ??
      (newDoctor as any)?.specialty;
    const duplicateSpec = sameWindow.some((it: any) => {
      const spec = (it.doctorId as any)?.specialty;
      const specId = spec?.toString?.() ?? spec;
      return specId && newDoctorSpec && specId === newDoctorSpec;
    });
    if (duplicateSpec) {
      res
        .status(400)
        .json({ message: "ƒê√£ c√≥ b√°c sƒ© c√πng chuy√™n khoa trong khung gi·ªù n√†y" });
      return;
    }

    // C·∫≠p nh·∫≠t ca l√†m vi·ªác
    existingShift.doctorId = new mongoose.Types.ObjectId(newDoctorId);
    existingShift.status = "pending";
    existingShift.rejectionReason = undefined;
    existingShift.busyReason = undefined;
    existingShift.adminNote =
      adminNote || `ƒê√£ thay th·∫ø t·ª´ b√°c sƒ© ${oldDoctorId.toString()}`;

    await existingShift.save();
    console.log("‚úÖ Doctor replacement successful!");

    res.json({
      message: "ƒê√£ thay th·∫ø b√°c sƒ© th√†nh c√¥ng",
      shift: existingShift,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói thay th·∫ø b√°c sƒ©", error });
  }
};

// Admin: C·∫≠p nh·∫≠t ca (kh√¥ng cho s·ª≠a khi ƒë√£ ƒë·∫∑t)
export const adminUpdateDoctorShift = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params as { id: string };
    const existing = await DoctorSchedule.findById(id);
    if (!existing) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác" });
      return;
    }
    if (existing.isBooked) {
      res.status(400).json({ message: "Kh√¥ng th·ªÉ s·ª≠a ca ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t" });
      return;
    }
    const updated = await DoctorSchedule.findByIdAndUpdate(id, req.body, {
      new: true,
    });
    res.json(updated);
  } catch (error) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t ca l√†m vi·ªác", error });
  }
};

// Admin: X√≥a ca (kh√¥ng cho x√≥a khi ƒë√£ ƒë·∫∑t)
export const adminDeleteDoctorShift = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params as { id: string };
    const existing = await DoctorSchedule.findById(id);
    if (!existing) {
      res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác" });
      return;
    }
    if (existing.isBooked) {
      res.status(400).json({ message: "Kh√¥ng th·ªÉ x√≥a ca ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t" });
      return;
    }
    await DoctorSchedule.findByIdAndDelete(id);
    res.json({ message: "ƒê√£ x√≥a ca l√†m vi·ªác" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x√≥a ca l√†m vi·ªác", error });
  }
};
